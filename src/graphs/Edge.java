package graphs;

import java.util.Objects;

/**
 * Represents an edge in a graph structure.
 *
 * DO NOT EDIT THIS FILE!
 *
 * @param <V> the type of vertex in the graph
 * @author Josh Archer
 * @version 1.0
 */
public class Edge<V>
{
    private V first;
    private V second;

    /**
     * Creates a new edge.
     * @param first the first vertex on the edge
     * @param second the second vertex on the edge
     */
    public Edge(V first, V second)
    {
        this.first = first;
        this.second = second;
    }

    /**
     * Returns the first vertex in the edge.
     * @return the first vertex
     */
    public V getFirst()
    {
        return first;
    }

    /**
     * Returns the second vertex in the edge.
     * @return the second vertex
     */
    public V getSecond()
    {
        return second;
    }

    @Override
    public boolean equals(Object other)
    {
        if (this == other)
        {
            return true;
        }
        if (other == null || getClass() != other.getClass())
        {
            return false;
        }

        Edge<?> edge = (Edge<?>) other;

        if (!Objects.equals(first, edge.first))
        {
            return false;
        }
        return Objects.equals(second, edge.second);
    }

    @Override
    public int hashCode()
    {
        int result = first != null ? first.hashCode() : 0;
        result = 31 * result + (second != null ? second.hashCode() : 0);
        return result;
    }

    @Override
    public String toString()
    {
        return "(" + first + ", " + second + ")";
    }
}
