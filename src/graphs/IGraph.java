package graphs;

import java.util.Set;

/**
 * Represents a directed, unweighted graph.
 *
 * DO NOT EDIT THIS FILE!
 *
 * @param <V> the type of vertices in the graph
 * @author Josh Archer
 * @version 1.0
 */
public interface IGraph<V>
{
    /**
     * Adds a new vertex to the graph
     * @param vertex the new vertex
     * @throws exceptions.DuplicateElementException if the vertex is already
     * in the graph
     */
    void addVertex(V vertex);

    /**
     * Adds a new edge to the graph.
     * @param first the first vertex on the edge
     * @param second the second vertex on the edge
     * @throws exceptions.NoSuchVertexException if either vertex parameter is
     * not already in the graph
     * @throws exceptions.DuplicateElementException if the edge already is in
     * the graph
     */
    void addEdge(V first, V second);

    /**
     * Adds a group of vertices to the graph.
     * @param vertices the group of vertices
     */
    void addVertex(V... vertices);

    /**
     * Adds a group of edges to the graph.
     * @param edges the group of edges
     */
    void addEdge(Edge<V>... edges);

    /**
     * Detects a vertex in the graph.
     * @param vertex the vertex to search for.
     * @return true if found, or otherwise false
     */
    boolean containsVertex(V vertex);

    /**
     * Detects an edge in the graph.
     * @param first the first vertex on the edge being searched for
     * @param second the second vertex on the edge being searched for
     * @return true if found, or otherwise false
     * @throws exceptions.NoSuchVertexException if either vertex parameter is
     * not already in the graph
     */
    boolean containsEdge(V first, V second);

    /**
     * Removes a vertex from the graph.
     * @param vertex the vertex to search for
     * @throws exceptions.NoSuchVertexException if the vertex is not in the graph
     */
    void removeVertex(V vertex);

    /**
     * Removes an edge from the graph
     * @param first the first vertex of the edge
     * @param second the second vertex of the edge
     * @throws exceptions.NoSuchVertexException if either vertex is not in the graph
     * @throws exceptions.NoSuchEdgeException if the edge is not in the graph
     */
    void removeEdge(V first, V second);

    /**
     * Reports the number of vertices in the graph
     * @return the number of vertices
     */
    int vertexSize();

    /**
     * Reports the number of edges in the graph.
     * @return the number of edges
     */
    int edgeSize();

    /**
     * Reports whether there are vertices or edges in the graph.
     * @return true, if no vertices or edges exist, otherwise false
     */
    boolean isEmpty();

    /**
     * Returns a set of all vertices in the graph
     * @return the set of vertices
     */
    Set<V> vertexSet();

    /**
     * Returns a set of all edges in the graph.
     * @return the set of edges
     */
    Set<Edge<V>> edgeSet();
}

