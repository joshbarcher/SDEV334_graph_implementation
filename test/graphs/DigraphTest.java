package graphs;

import exceptions.DuplicateElementException;
import exceptions.NoSuchEdgeException;
import exceptions.NoSuchVertexException;
import exceptions.SelfLoopException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.ValueSource;

import java.util.Set;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Tests the methods of a class that uses the
 * IGraph interface.
 *
 * DO NOT EDIT THIS FILE!
 *
 * @author Josh Archer
 * @version 1.0
 */
public class DigraphTest
{
    private static final int SMALL_NUM_VERTS = 5;
    private IGraph<Integer> graph;

    /**
     * Creates a new graph for each test run.
     */
    @BeforeEach
    public void setUp()
    {
        //instantiate your graph class here!
        graph = null;
    }

    private void addSomeVertices(int num)
    {
        for (int i = 1; i <= num; i++)
        {
            graph.addVertex(i);
        }
    }

    private Edge<Integer>[] getSomeEdges()
    {
        return new Edge[]{
            new Edge<>(1, 2),
            new Edge<>(2, 3),
            new Edge<>(1, 3),
            new Edge<>(3, 1),
            new Edge<>(3, 2),
            new Edge<>(4, 5),
            new Edge<>(1, 4),
            new Edge<>(1, 5)
        };
    }

    /**
     * Tests adding different numbers of vertices
     * to the graph
     * @param numVertices the number of vertices to
     *                    add for each test run
     */
    @ParameterizedTest
    @ValueSource(ints = {1, 2, 3, 4, 5})
    public void testaddVertex(int numVertices)
    {
        addSomeVertices(numVertices);

        assertEquals(numVertices, graph.vertexSize(),
            "Vertex size is incorrect after adding a few elements");
    }

    /**
     * Tests the varargs version of the addVertex() method.
     */
    @Test
    public void testAddMultipleVertices()
    {
        addSomeVertices(SMALL_NUM_VERTS);

        Integer[] params = {6, 7, 8, 9, 10};
        graph.addVertex(params);
        assertEquals(SMALL_NUM_VERTS + params.length, graph.vertexSize(),
            "Vertex size is incorrect after adding multiple vertices at once");
    }

    /**
     * Tests adding various duplicate vertices to the graph.
     * @param duplicate the duplicate vertex to add
     */
    @ParameterizedTest
    @ValueSource(ints = {1, 2, 3, 4, 5})
    public void testaddDuplicateVertex(int duplicate)
    {
        addSomeVertices(SMALL_NUM_VERTS);

        //add a duplicate
        assertThrows(DuplicateElementException.class, () -> graph.addVertex(duplicate));
    }

    /**
     * Tests whether individual edges can be added to the
     * graph.
     */
    @Test
    public void testAddEdge()
    {
        addSomeVertices(SMALL_NUM_VERTS);
        Edge<Integer>[] edges = getSomeEdges();

        for (Edge<Integer> edge : edges)
        {
            graph.addEdge(edge.getFirst(), edge.getSecond());
        }

        assertEquals(edges.length, graph.edgeSize(),
            "Edge size is incorrect after adding edges");
    }

    /**
     * Tests whether the varargs version of addEdge() works
     * in the graph.
     */
    @Test
    public void testAddMultipleEdges()
    {
        addSomeVertices(SMALL_NUM_VERTS);
        Edge<Integer>[] edges = getSomeEdges();

        graph.addEdge(edges);
        assertEquals(edges.length, graph.edgeSize(),
            "Edge size is incorrect after adding multiple edges at once");
    }

    /**
     * Verifies that self loops are detected in the graph.
     */
    @Test
    public void testSelfLoops()
    {
        addSomeVertices(SMALL_NUM_VERTS);
        assertThrows(SelfLoopException.class, () -> graph.addEdge(1, 1));
    }

    /**
     * Verifies that edges with missing vertices are detected
     * in the graph.
     */
    @Test
    public void testAddEdgeMissingVert()
    {
        addSomeVertices(SMALL_NUM_VERTS);
        assertThrows(NoSuchVertexException.class, () -> graph.addEdge(0, 3));
    }

    /**
     * Verifies that duplicate edges are detected in the graph.
     *
     * @param first the first vertex of the duplicate edge
     * @param second the second vertex of the duplicate edge
     */
    @ParameterizedTest
    @MethodSource("getArgsExistingEdges")
    public void testDuplicateEdge(int first, int second)
    {
        addSomeVertices(SMALL_NUM_VERTS);
        graph.addEdge(getSomeEdges());
        assertThrows(DuplicateElementException.class, () -> graph.addEdge(first, second));
    }

    /**
     * Tests whether containsVertex() can find vertices in the graph.
     * @param containedVertex the vertex to search for
     */
    @ParameterizedTest
    @ValueSource(ints = {1, 2, 3, 4, 5})
    public void testContainsVertExists(int containedVertex)
    {
        addSomeVertices(SMALL_NUM_VERTS);
        assertTrue(graph.containsVertex(containedVertex),
            "Vertex in graph is not found with contains");
    }

    /**
     * Tests whether containsVertex() reports missing vertices not in
     * the graph.
     * @param missingVertex the vertex to search for
     */
    @ParameterizedTest
    @ValueSource(ints = {0, 6})
    public void testContainsVertDoesNotExist(int missingVertex)
    {
        addSomeVertices(SMALL_NUM_VERTS);
        assertFalse(graph.containsVertex(missingVertex),
            "Vertex in graph is found with contains when not in graph");
    }


    /**
     * Tests whether containsEdge() can find edges in the graph.
     *
     * @param first the first vertex on the edge to search for
     * @param second the second vertex on the edge to search for
     */
    @ParameterizedTest
    @MethodSource("getArgsExistingEdges")
    public void testContainsEdge(int first, int second)
    {
        addSomeVertices(SMALL_NUM_VERTS);
        graph.addEdge(getSomeEdges());
        assertTrue(graph.containsEdge(first, second),
            "Edge in graph is not found with contains");
    }

    private static Stream<Arguments> getArgsExistingEdges()
    {
        return Stream.of(
            Arguments.of(1, 2),
            Arguments.of(2, 3),
            Arguments.of(3, 1),
            Arguments.of(3, 2),
            Arguments.of(1, 3),
            Arguments.of(4, 5),
            Arguments.of(1, 4),
            Arguments.of(1, 5)
        );
    }

    /**
     * Tests whether containsEdge() can detect missing edges in the graph.
     *
     * @param first the first vertex on the edge to search for
     * @param second the second vertex on the edge to search for
     */
    @ParameterizedTest
    @MethodSource("getArgsMissingEdge")
    public void testMissingEdge(int first, int second)
    {
        addSomeVertices(SMALL_NUM_VERTS);
        graph.addEdge(getSomeEdges());
        assertFalse(graph.containsEdge(first, second),
            "Edge in graph is found with contains when not in graph");
    }

    private static Stream<Arguments> getArgsMissingEdge()
    {
        return Stream.of(
            Arguments.of(5, 4),
            Arguments.of(3, 4),
            Arguments.of(4, 3)
        );
    }

    /**
     * Verifies that searches for edges that have vertices not in the
     * graph throw the appropriate exception.
     */
    @Test
    public void testContainsEdgeMissingVert()
    {
        addSomeVertices(SMALL_NUM_VERTS);
        graph.addEdge(getSomeEdges());

        assertThrows(NoSuchVertexException.class, () -> graph.containsEdge(6, 1));
    }

    /**
     * Tests that vertices in the graph can be removed.
     */
    @Test
    public void testRemoveExistingVertex()
    {
        addSomeVertices(SMALL_NUM_VERTS);

        int size = graph.vertexSize();
        for (int i = 1; i <= SMALL_NUM_VERTS; i++)
        {
            graph.removeVertex(i);

            assertFalse(graph.containsVertex(i),
                "Vertex in graph is found after being removed");
            assertEquals(size - 1, graph.vertexSize(),
                "Vertex size has not been decremented after removing vertex");
            size--;
        }
    }

    /**
     * Tests that vertices not in the graph cannot be removed.
     *
     * @param missingVertex the vertex to search for
     */
    @ParameterizedTest
    @ValueSource(ints = {0, 6})
    public void testRemoveMissingVertex(int missingVertex)
    {
        addSomeVertices(SMALL_NUM_VERTS);

        assertThrows(NoSuchVertexException.class, () -> graph.removeVertex(missingVertex));
    }

    /**
     * Tests whether edges can be found and removed in the graph.
     *
     * @param first the first vertex on an edge that is in the graph
     * @param second the second vertex on an edge that is in the graph
     */
    @ParameterizedTest
    @MethodSource("getArgsExistingEdges")
    public void testRemoveExistingEdge(int first, int second)
    {
        addSomeVertices(SMALL_NUM_VERTS);
        graph.addEdge(getSomeEdges());

        int size = graph.edgeSize();
        graph.removeEdge(first, second);

        //edge should be removed
        assertFalse(graph.containsEdge(first, second),
            "Edge in graph is found after being removed");
        assertEquals(size - 1, graph.edgeSize(),
            "Edge size has not been decremented after removing edge");
    }

    /**
     * Tests whether missing edges are detected when trying to remove
     * in the graph.
     *
     * @param first the first vertex on an edge that is in the graph
     * @param second the second vertex on an edge that is in the graph
     */
    @ParameterizedTest
    @MethodSource("getArgsMissingEdge")
    public void testRemoveMissingEdge(int first, int second)
    {
        addSomeVertices(SMALL_NUM_VERTS);
        graph.addEdge(getSomeEdges());

        assertThrows(NoSuchEdgeException.class, () -> graph.removeEdge(first, second));
    }

    /**
     * Tests that an empty graph reports the number of elements correctly.
     */
    @Test
    public void testEmptyGraph()
    {
        assertAll("Graph should report no elements when empty",
            () -> assertEquals(0, graph.vertexSize()),
            () -> assertEquals(0, graph.edgeSize()),
            () -> assertTrue(graph.isEmpty())
        );
    }

    /**
     * Tests that a non-empty graph reports the number of elements correctly.
     */
    @Test
    public void testNotEmptyGraph()
    {
        addSomeVertices(SMALL_NUM_VERTS);
        graph.addEdge(getSomeEdges());

        assertAll("Graph should report elements when not empty",
            () -> assertNotEquals(0, graph.vertexSize()),
            () -> assertNotEquals(0, graph.edgeSize()),
            () -> assertFalse(graph.isEmpty())
        );
    }

    /**
     * Verifies that the number of vertices reported in the graph changes
     * as you would expect.
     *
     * @param numElements the number of vertices to add to the graph
     */
    @ParameterizedTest
    @ValueSource(ints = {1, 2, 3, 4, 5})
    public void vertexSize(int numElements)
    {
        addSomeVertices(numElements);
        assertEquals(numElements, graph.vertexSize(),
            "Number of vertices is not correct after calling add().");
    }

    /**
     * Verifies that the number of edges reported in the graph changes
     * as you would expect.
     *
     * @param numEdges the number of edges to add to the graph
     */
    @ParameterizedTest
    @ValueSource(ints = {1, 2, 3, 4, 5, 6, 7, 8})
    public void edgeSize(int numEdges)
    {
        addSomeVertices(SMALL_NUM_VERTS);
        Edge<Integer>[] edges = getSomeEdges();

        for (int i = 0; i < numEdges; i++)
        {
            graph.addEdge(edges[i].getFirst(), edges[i].getSecond());
        }
        assertEquals(numEdges, graph.edgeSize(),
            "Number of vertices is not correct after calling add().");
    }

    /**
     * Verifies that an empty vertex set can be retrieved from
     * an empty graph.
     */
    @Test
    public void testEmptyVertexSet()
    {
        Set<Integer> empty = graph.vertexSet();
        assertEquals(0, empty.size(),
            "Vertex set should be empty when no vertices have been added");
    }

    /**
     * Verifies that the vertex set can be retrieved from the graph.
     * @param numElements the number of vertices in the graph
     */
    @ParameterizedTest
    @ValueSource(ints = {1, 2, 3, 4, 5, 6, 7, 8})
    public void testVertexSet(int numElements)
    {
        addSomeVertices(numElements);
        Set<Integer> vertices = graph.vertexSet();

        for (int i = 1; i <= numElements; i++)
        {
            assertTrue(vertices.contains(i),
                "Vertex set should contain vertices that were added");
        }
        assertEquals(numElements, vertices.size(),
            "Number of vertices in vertex set should match number added");
    }

    /**
     * Verifies that an empty edge set can be retrieved from
     * an empty graph.
     */
    @Test
    public void testEmptyEdgeSet()
    {
        Set<Edge<Integer>> empty = graph.edgeSet();
        assertEquals(0, empty.size(),
            "Edge set should be empty when no edges have been added");
    }

    /**
     * Verifies that the edge set can be retrieved from the graph.
     */
    @Test
    public void testEdgeSet()
    {
        addSomeVertices(SMALL_NUM_VERTS);
        Edge<Integer>[] edges = getSomeEdges();
        graph.addEdge(edges);
        Set<Edge<Integer>> edgeSet = graph.edgeSet();

        for (Edge<Integer> edge : edges)
        {
            assertTrue(edgeSet.contains(edge),
                "Edge set should contain edges that were added");
        }
        assertEquals(edges.length, edgeSet.size(),
            "Number of edges in edge set should match number added");
    }
}